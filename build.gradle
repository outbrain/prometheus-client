plugins {
    id 'idea'
    id 'groovy'
    id 'maven'
    id "com.jfrog.bintray" version "1.7"
}

group = 'com.outbrain.swinfra'
version = '0.14-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    jmh
}

dependencies {
    compile(
        'io.dropwizard.metrics:metrics-core:3.1.2',
        'org.apache.commons:commons-lang3:3.3.2'
    )

    testCompile(
        'junit:junit:4.12',
        'org.spockframework:spock-core:1.0-groovy-2.0',
        'cglib:cglib-nodep:3.1',
        'org.objenesis:objenesis:2.4'
    )
    jmhCompile(
        project,
        'org.openjdk.jmh:jmh-core:0.9',
        'org.openjdk.jmh:jmh-generator-annprocess:0.9',
        'io.prometheus:simpleclient:0.0.18',
        'io.prometheus:simpleclient_common:0.0.18',
    )
}


task jmhHelp(description:'Print help for the jmh task', group: 'jmh')  {
    doLast {
        println ""
        println "Usage of jmh tasks:"
        println ""

        println "Only execute specific benchmark(s):"
        println "\t./gradlew jmh -Pinclude=\".*MyBenchmark.*\""

        println ""
        println "Specify extra profilers:"
        println "\t./gradlew jmh -Pprofilers=\"gc,stack\""

        println ""
        println "Prominent profilers (for full list call jmhProfilers task):"
        println "\tcomp - JitCompilations, tune your iterations"
        println "\tstack - which methods used most time"
        println "\tgc - print garbage collection stats"
        println "\ths_thr - thread usage"

        println ""
        println "Change report format from JSON to one of [CSV, JSON, NONE, SCSV, TEXT]:"
        println "\t./gradlew jmh -Pformat=csv"

        println ""
        println "Specify JVM arguments:"
        println "\t./gradlew jmh -PjvmArgs=\"-Dtest.cluster=local\""

        println ""
        println "Specify iterations etc.:"
        println "\t./gradlew jmh -Piterations=5 -Pwarmups=4 -Pforks=3"

        println ""
        println "Resources:"
        println "\thttp://tutorials.jenkov.com/java-performance/jmh.html (Introduction)"
        println "\thttp://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/ (Samples)"
    }
}

task jmhProfilers(type: JavaExec, description:'Lists the available profilers for the jmh task', group: 'jmh') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'
    args '-lprof'
}

task jmh(type: JavaExec, description: 'Executing JMH benchmarks', group: 'jmh') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '');
    def exclude = project.properties.get('exclude');
    def format = project.properties.get('format', 'json');
    def profilers = project.properties.get('profilers');
    def jvmArgs = project.properties.get('jvmArgs')
    def iterations = project.properties.get('iterations', 15)
    def forks = project.properties.get('forks', 2)
    def warmUpIterations = project.properties.get('warmups', 4)

    def resultFile = file("build/reports/jmh/result.${format}")

    args include
    if(exclude) {
        args '-e', exclude
    }
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx1024m'
    args '-jvmArgsAppend', '-Xms1024m'
    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsAppend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    args '-wi', warmUpIterations
    args '-f', forks
    args '-i', iterations

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    configurations = ['archives']

    pkg {
        repo = 'OutbrainOSS'
        name = 'prometheus-client'
        userOrg = 'outbrain'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/outbrain/prometheus-client.git'
        version {
            name = project.version
        }
    }
}